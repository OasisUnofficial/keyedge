#ifndef OCALLS_BUILDER_H
#define OCALLS_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef OCALLS_READER_H
#include "ocalls_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

static const flatbuffers_voffset_t ____pointer_flatbuffers_int8_required[] = { 0 };
typedef flatbuffers_ref_t __pointer_flatbuffers_int8_ref_t;
static __pointer_flatbuffers_int8_ref_t __pointer_flatbuffers_int8_clone(flatbuffers_builder_t *B, __pointer_flatbuffers_int8_table_t t);
__flatbuffers_build_table(flatbuffers_, __pointer_flatbuffers_int8, 2)

static const flatbuffers_voffset_t ____ocall_wrapper_print_return_value_required[] = { 0 };
typedef flatbuffers_ref_t __ocall_wrapper_print_return_value_ref_t;
static __ocall_wrapper_print_return_value_ref_t __ocall_wrapper_print_return_value_clone(flatbuffers_builder_t *B, __ocall_wrapper_print_return_value_table_t t);
__flatbuffers_build_table(flatbuffers_, __ocall_wrapper_print_return_value, 2)

static const flatbuffers_voffset_t ____ocall_wrapper_print_string_required[] = { 0 };
typedef flatbuffers_ref_t __ocall_wrapper_print_string_ref_t;
static __ocall_wrapper_print_string_ref_t __ocall_wrapper_print_string_clone(flatbuffers_builder_t *B, __ocall_wrapper_print_string_table_t t);
__flatbuffers_build_table(flatbuffers_, __ocall_wrapper_print_string, 3)

#define ____pointer_flatbuffers_int8_formal_args , flatbuffers_bool_t v0, int8_t v1
#define ____pointer_flatbuffers_int8_call_args , v0, v1
static inline __pointer_flatbuffers_int8_ref_t __pointer_flatbuffers_int8_create(flatbuffers_builder_t *B ____pointer_flatbuffers_int8_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, __pointer_flatbuffers_int8, __pointer_flatbuffers_int8_identifier, __pointer_flatbuffers_int8_type_identifier)

#define ____ocall_wrapper_print_return_value_formal_args , int32_t v0, int32_t v1
#define ____ocall_wrapper_print_return_value_call_args , v0, v1
static inline __ocall_wrapper_print_return_value_ref_t __ocall_wrapper_print_return_value_create(flatbuffers_builder_t *B ____ocall_wrapper_print_return_value_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, __ocall_wrapper_print_return_value, __ocall_wrapper_print_return_value_identifier, __ocall_wrapper_print_return_value_type_identifier)

#define ____ocall_wrapper_print_string_formal_args , flatbuffers_int8_vec_ref_t v0, int32_t v1, int32_t v2
#define ____ocall_wrapper_print_string_call_args , v0, v1, v2
static inline __ocall_wrapper_print_string_ref_t __ocall_wrapper_print_string_create(flatbuffers_builder_t *B ____ocall_wrapper_print_string_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, __ocall_wrapper_print_string, __ocall_wrapper_print_string_identifier, __ocall_wrapper_print_string_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, __pointer_flatbuffers_int8___is_null, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), __pointer_flatbuffers_int8)
__flatbuffers_build_scalar_field(1, flatbuffers_, __pointer_flatbuffers_int8___data, flatbuffers_int8, int8_t, 1, 1, INT8_C(0), __pointer_flatbuffers_int8)

static inline __pointer_flatbuffers_int8_ref_t __pointer_flatbuffers_int8_create(flatbuffers_builder_t *B ____pointer_flatbuffers_int8_formal_args)
{
    if (__pointer_flatbuffers_int8_start(B)
        || __pointer_flatbuffers_int8___is_null_add(B, v0)
        || __pointer_flatbuffers_int8___data_add(B, v1)) {
        return 0;
    }
    return __pointer_flatbuffers_int8_end(B);
}

static __pointer_flatbuffers_int8_ref_t __pointer_flatbuffers_int8_clone(flatbuffers_builder_t *B, __pointer_flatbuffers_int8_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (__pointer_flatbuffers_int8_start(B)
        || __pointer_flatbuffers_int8___is_null_pick(B, t)
        || __pointer_flatbuffers_int8___data_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, __pointer_flatbuffers_int8_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, __ocall_wrapper_print_return_value_msg, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), __ocall_wrapper_print_return_value)
__flatbuffers_build_scalar_field(1, flatbuffers_, __ocall_wrapper_print_return_value___return_value, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), __ocall_wrapper_print_return_value)

static inline __ocall_wrapper_print_return_value_ref_t __ocall_wrapper_print_return_value_create(flatbuffers_builder_t *B ____ocall_wrapper_print_return_value_formal_args)
{
    if (__ocall_wrapper_print_return_value_start(B)
        || __ocall_wrapper_print_return_value_msg_add(B, v0)
        || __ocall_wrapper_print_return_value___return_value_add(B, v1)) {
        return 0;
    }
    return __ocall_wrapper_print_return_value_end(B);
}

static __ocall_wrapper_print_return_value_ref_t __ocall_wrapper_print_return_value_clone(flatbuffers_builder_t *B, __ocall_wrapper_print_return_value_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (__ocall_wrapper_print_return_value_start(B)
        || __ocall_wrapper_print_return_value_msg_pick(B, t)
        || __ocall_wrapper_print_return_value___return_value_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, __ocall_wrapper_print_return_value_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, __ocall_wrapper_print_string_msg, flatbuffers_int8, int8_t, __ocall_wrapper_print_string)
__flatbuffers_build_scalar_field(1, flatbuffers_, __ocall_wrapper_print_string_size, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), __ocall_wrapper_print_string)
__flatbuffers_build_scalar_field(2, flatbuffers_, __ocall_wrapper_print_string___return_value, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), __ocall_wrapper_print_string)

static inline __ocall_wrapper_print_string_ref_t __ocall_wrapper_print_string_create(flatbuffers_builder_t *B ____ocall_wrapper_print_string_formal_args)
{
    if (__ocall_wrapper_print_string_start(B)
        || __ocall_wrapper_print_string_msg_add(B, v0)
        || __ocall_wrapper_print_string_size_add(B, v1)
        || __ocall_wrapper_print_string___return_value_add(B, v2)) {
        return 0;
    }
    return __ocall_wrapper_print_string_end(B);
}

static __ocall_wrapper_print_string_ref_t __ocall_wrapper_print_string_clone(flatbuffers_builder_t *B, __ocall_wrapper_print_string_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (__ocall_wrapper_print_string_start(B)
        || __ocall_wrapper_print_string_msg_pick(B, t)
        || __ocall_wrapper_print_string_size_pick(B, t)
        || __ocall_wrapper_print_string___return_value_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, __ocall_wrapper_print_string_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* OCALLS_BUILDER_H */
