#ifndef OCALLS_BUILDER_H
#define OCALLS_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef OCALLS_READER_H
#include "ocalls_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

static const flatbuffers_voffset_t __nest3_required[] = { 0 };
typedef flatbuffers_ref_t nest3_ref_t;
static nest3_ref_t nest3_clone(flatbuffers_builder_t *B, nest3_table_t t);
__flatbuffers_build_table(flatbuffers_, nest3, 1)

static const flatbuffers_voffset_t __nest2_required[] = { 0 };
typedef flatbuffers_ref_t nest2_ref_t;
static nest2_ref_t nest2_clone(flatbuffers_builder_t *B, nest2_table_t t);
__flatbuffers_build_table(flatbuffers_, nest2, 2)

static const flatbuffers_voffset_t __nest1_required[] = { 0 };
typedef flatbuffers_ref_t nest1_ref_t;
static nest1_ref_t nest1_clone(flatbuffers_builder_t *B, nest1_table_t t);
__flatbuffers_build_table(flatbuffers_, nest1, 2)

static const flatbuffers_voffset_t ____pointer_flatbuffers_int8_required[] = { 0 };
typedef flatbuffers_ref_t __pointer_flatbuffers_int8_ref_t;
static __pointer_flatbuffers_int8_ref_t __pointer_flatbuffers_int8_clone(flatbuffers_builder_t *B, __pointer_flatbuffers_int8_table_t t);
__flatbuffers_build_table(flatbuffers_, __pointer_flatbuffers_int8, 2)

static const flatbuffers_voffset_t ____pointer_nest3_required[] = { 0 };
typedef flatbuffers_ref_t __pointer_nest3_ref_t;
static __pointer_nest3_ref_t __pointer_nest3_clone(flatbuffers_builder_t *B, __pointer_nest3_table_t t);
__flatbuffers_build_table(flatbuffers_, __pointer_nest3, 2)

static const flatbuffers_voffset_t ____pointer_nest2_required[] = { 0 };
typedef flatbuffers_ref_t __pointer_nest2_ref_t;
static __pointer_nest2_ref_t __pointer_nest2_clone(flatbuffers_builder_t *B, __pointer_nest2_table_t t);
__flatbuffers_build_table(flatbuffers_, __pointer_nest2, 2)

static const flatbuffers_voffset_t ____ocall_wrapper_test_nested_struct_required[] = { 0 };
typedef flatbuffers_ref_t __ocall_wrapper_test_nested_struct_ref_t;
static __ocall_wrapper_test_nested_struct_ref_t __ocall_wrapper_test_nested_struct_clone(flatbuffers_builder_t *B, __ocall_wrapper_test_nested_struct_table_t t);
__flatbuffers_build_table(flatbuffers_, __ocall_wrapper_test_nested_struct, 2)

static const flatbuffers_voffset_t ____ocall_wrapper_test_two_dimensional_array_required[] = { 0 };
typedef flatbuffers_ref_t __ocall_wrapper_test_two_dimensional_array_ref_t;
static __ocall_wrapper_test_two_dimensional_array_ref_t __ocall_wrapper_test_two_dimensional_array_clone(flatbuffers_builder_t *B, __ocall_wrapper_test_two_dimensional_array_table_t t);
__flatbuffers_build_table(flatbuffers_, __ocall_wrapper_test_two_dimensional_array, 2)

#define __nest3_formal_args , flatbuffers_int8_vec_ref_t v0
#define __nest3_call_args , v0
static inline nest3_ref_t nest3_create(flatbuffers_builder_t *B __nest3_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, nest3, nest3_identifier, nest3_type_identifier)

#define __nest2_formal_args , __pointer_nest3_ref_t v0, flatbuffers_int8_vec_ref_t v1
#define __nest2_call_args , v0, v1
static inline nest2_ref_t nest2_create(flatbuffers_builder_t *B __nest2_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, nest2, nest2_identifier, nest2_type_identifier)

#define __nest1_formal_args , __pointer_nest2_ref_t v0, flatbuffers_int8_vec_ref_t v1
#define __nest1_call_args , v0, v1
static inline nest1_ref_t nest1_create(flatbuffers_builder_t *B __nest1_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, nest1, nest1_identifier, nest1_type_identifier)

#define ____pointer_flatbuffers_int8_formal_args , flatbuffers_bool_t v0, int8_t v1
#define ____pointer_flatbuffers_int8_call_args , v0, v1
static inline __pointer_flatbuffers_int8_ref_t __pointer_flatbuffers_int8_create(flatbuffers_builder_t *B ____pointer_flatbuffers_int8_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, __pointer_flatbuffers_int8, __pointer_flatbuffers_int8_identifier, __pointer_flatbuffers_int8_type_identifier)

#define ____pointer_nest3_formal_args , flatbuffers_bool_t v0, nest3_ref_t v1
#define ____pointer_nest3_call_args , v0, v1
static inline __pointer_nest3_ref_t __pointer_nest3_create(flatbuffers_builder_t *B ____pointer_nest3_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, __pointer_nest3, __pointer_nest3_identifier, __pointer_nest3_type_identifier)

#define ____pointer_nest2_formal_args , flatbuffers_bool_t v0, nest2_ref_t v1
#define ____pointer_nest2_call_args , v0, v1
static inline __pointer_nest2_ref_t __pointer_nest2_create(flatbuffers_builder_t *B ____pointer_nest2_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, __pointer_nest2, __pointer_nest2_identifier, __pointer_nest2_type_identifier)

#define ____ocall_wrapper_test_nested_struct_formal_args , nest1_ref_t v0, int32_t v1
#define ____ocall_wrapper_test_nested_struct_call_args , v0, v1
static inline __ocall_wrapper_test_nested_struct_ref_t __ocall_wrapper_test_nested_struct_create(flatbuffers_builder_t *B ____ocall_wrapper_test_nested_struct_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, __ocall_wrapper_test_nested_struct, __ocall_wrapper_test_nested_struct_identifier, __ocall_wrapper_test_nested_struct_type_identifier)

#define ____ocall_wrapper_test_two_dimensional_array_formal_args , flatbuffers_int32_vec_ref_t v0, int32_t v1
#define ____ocall_wrapper_test_two_dimensional_array_call_args , v0, v1
static inline __ocall_wrapper_test_two_dimensional_array_ref_t __ocall_wrapper_test_two_dimensional_array_create(flatbuffers_builder_t *B ____ocall_wrapper_test_two_dimensional_array_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, __ocall_wrapper_test_two_dimensional_array, __ocall_wrapper_test_two_dimensional_array_identifier, __ocall_wrapper_test_two_dimensional_array_type_identifier)

__flatbuffers_build_vector_field(0, flatbuffers_, nest3_str, flatbuffers_int8, int8_t, nest3)

static inline nest3_ref_t nest3_create(flatbuffers_builder_t *B __nest3_formal_args)
{
    if (nest3_start(B)
        || nest3_str_add(B, v0)) {
        return 0;
    }
    return nest3_end(B);
}

static nest3_ref_t nest3_clone(flatbuffers_builder_t *B, nest3_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (nest3_start(B)
        || nest3_str_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, nest3_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, nest2_n, __pointer_nest3, nest2)
__flatbuffers_build_vector_field(1, flatbuffers_, nest2_str, flatbuffers_int8, int8_t, nest2)

static inline nest2_ref_t nest2_create(flatbuffers_builder_t *B __nest2_formal_args)
{
    if (nest2_start(B)
        || nest2_n_add(B, v0)
        || nest2_str_add(B, v1)) {
        return 0;
    }
    return nest2_end(B);
}

static nest2_ref_t nest2_clone(flatbuffers_builder_t *B, nest2_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (nest2_start(B)
        || nest2_n_pick(B, t)
        || nest2_str_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, nest2_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, nest1_n, __pointer_nest2, nest1)
__flatbuffers_build_vector_field(1, flatbuffers_, nest1_str, flatbuffers_int8, int8_t, nest1)

static inline nest1_ref_t nest1_create(flatbuffers_builder_t *B __nest1_formal_args)
{
    if (nest1_start(B)
        || nest1_n_add(B, v0)
        || nest1_str_add(B, v1)) {
        return 0;
    }
    return nest1_end(B);
}

static nest1_ref_t nest1_clone(flatbuffers_builder_t *B, nest1_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (nest1_start(B)
        || nest1_n_pick(B, t)
        || nest1_str_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, nest1_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, __pointer_flatbuffers_int8___is_null, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), __pointer_flatbuffers_int8)
__flatbuffers_build_scalar_field(1, flatbuffers_, __pointer_flatbuffers_int8___data, flatbuffers_int8, int8_t, 1, 1, INT8_C(0), __pointer_flatbuffers_int8)

static inline __pointer_flatbuffers_int8_ref_t __pointer_flatbuffers_int8_create(flatbuffers_builder_t *B ____pointer_flatbuffers_int8_formal_args)
{
    if (__pointer_flatbuffers_int8_start(B)
        || __pointer_flatbuffers_int8___is_null_add(B, v0)
        || __pointer_flatbuffers_int8___data_add(B, v1)) {
        return 0;
    }
    return __pointer_flatbuffers_int8_end(B);
}

static __pointer_flatbuffers_int8_ref_t __pointer_flatbuffers_int8_clone(flatbuffers_builder_t *B, __pointer_flatbuffers_int8_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (__pointer_flatbuffers_int8_start(B)
        || __pointer_flatbuffers_int8___is_null_pick(B, t)
        || __pointer_flatbuffers_int8___data_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, __pointer_flatbuffers_int8_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, __pointer_nest3___is_null, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), __pointer_nest3)
__flatbuffers_build_table_field(1, flatbuffers_, __pointer_nest3___data, nest3, __pointer_nest3)

static inline __pointer_nest3_ref_t __pointer_nest3_create(flatbuffers_builder_t *B ____pointer_nest3_formal_args)
{
    if (__pointer_nest3_start(B)
        || __pointer_nest3___data_add(B, v1)
        || __pointer_nest3___is_null_add(B, v0)) {
        return 0;
    }
    return __pointer_nest3_end(B);
}

static __pointer_nest3_ref_t __pointer_nest3_clone(flatbuffers_builder_t *B, __pointer_nest3_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (__pointer_nest3_start(B)
        || __pointer_nest3___data_pick(B, t)
        || __pointer_nest3___is_null_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, __pointer_nest3_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, __pointer_nest2___is_null, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), __pointer_nest2)
__flatbuffers_build_table_field(1, flatbuffers_, __pointer_nest2___data, nest2, __pointer_nest2)

static inline __pointer_nest2_ref_t __pointer_nest2_create(flatbuffers_builder_t *B ____pointer_nest2_formal_args)
{
    if (__pointer_nest2_start(B)
        || __pointer_nest2___data_add(B, v1)
        || __pointer_nest2___is_null_add(B, v0)) {
        return 0;
    }
    return __pointer_nest2_end(B);
}

static __pointer_nest2_ref_t __pointer_nest2_clone(flatbuffers_builder_t *B, __pointer_nest2_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (__pointer_nest2_start(B)
        || __pointer_nest2___data_pick(B, t)
        || __pointer_nest2___is_null_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, __pointer_nest2_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, __ocall_wrapper_test_nested_struct_n, nest1, __ocall_wrapper_test_nested_struct)
__flatbuffers_build_scalar_field(1, flatbuffers_, __ocall_wrapper_test_nested_struct___return_value, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), __ocall_wrapper_test_nested_struct)

static inline __ocall_wrapper_test_nested_struct_ref_t __ocall_wrapper_test_nested_struct_create(flatbuffers_builder_t *B ____ocall_wrapper_test_nested_struct_formal_args)
{
    if (__ocall_wrapper_test_nested_struct_start(B)
        || __ocall_wrapper_test_nested_struct_n_add(B, v0)
        || __ocall_wrapper_test_nested_struct___return_value_add(B, v1)) {
        return 0;
    }
    return __ocall_wrapper_test_nested_struct_end(B);
}

static __ocall_wrapper_test_nested_struct_ref_t __ocall_wrapper_test_nested_struct_clone(flatbuffers_builder_t *B, __ocall_wrapper_test_nested_struct_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (__ocall_wrapper_test_nested_struct_start(B)
        || __ocall_wrapper_test_nested_struct_n_pick(B, t)
        || __ocall_wrapper_test_nested_struct___return_value_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, __ocall_wrapper_test_nested_struct_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, __ocall_wrapper_test_two_dimensional_array_arr, flatbuffers_int32, int32_t, __ocall_wrapper_test_two_dimensional_array)
__flatbuffers_build_scalar_field(1, flatbuffers_, __ocall_wrapper_test_two_dimensional_array___return_value, flatbuffers_int32, int32_t, 4, 4, INT32_C(0), __ocall_wrapper_test_two_dimensional_array)

static inline __ocall_wrapper_test_two_dimensional_array_ref_t __ocall_wrapper_test_two_dimensional_array_create(flatbuffers_builder_t *B ____ocall_wrapper_test_two_dimensional_array_formal_args)
{
    if (__ocall_wrapper_test_two_dimensional_array_start(B)
        || __ocall_wrapper_test_two_dimensional_array_arr_add(B, v0)
        || __ocall_wrapper_test_two_dimensional_array___return_value_add(B, v1)) {
        return 0;
    }
    return __ocall_wrapper_test_two_dimensional_array_end(B);
}

static __ocall_wrapper_test_two_dimensional_array_ref_t __ocall_wrapper_test_two_dimensional_array_clone(flatbuffers_builder_t *B, __ocall_wrapper_test_two_dimensional_array_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (__ocall_wrapper_test_two_dimensional_array_start(B)
        || __ocall_wrapper_test_two_dimensional_array_arr_pick(B, t)
        || __ocall_wrapper_test_two_dimensional_array___return_value_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, __ocall_wrapper_test_two_dimensional_array_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* OCALLS_BUILDER_H */
